This is the first line of my file.
This is the second line of my file.

{

This is how someone can add Notepad++ in Gitbash in 64 bit system :- 

$ echo 'alias npp="C:/Program\ Files\/Notepad\+\+/notepad\+\+.exe"' >> ~/.bashrc

Here are the steps :- 

$ cd ~ 
$ $ echo 'alias npp="C:/Program\ Files\/Notepad\+\+/notepad\+\+.exe"' >> ~/.bashrc

Now close and reopen gitbash 

$ npp [ Filename ]

Here you go !!!

}

{

If you want to link two local repositories to a single remote repository , follow the folling commands :- 

Before this if you have'nt done any thing from your second local repo, perform the folloing command,
$ git clone <url>

First add the remote repo to local repo,
$ git remote add <name> <url>

Then the folling command,
$ git pull scm master --allow-unrelated-histories
From https://github.com/ryanMukerji/Source-Code-Management-
 * branch            master     -> FETCH_HEAD
CONFLICT (add/add): Merge conflict in .gitignore
Auto-merging .gitignore
Automatic merge failed; fix conflicts and then commit the result.

Then this,
$ git mergetool

This message is displayed because 'merge.tool' is not configured.
See 'git mergetool --tool-help' or 'git help config' for more details.
'git mergetool' will now attempt to use one of the following tools:
opendiff kdiff3 tkdiff xxdiff meld tortoisemerge gvimdiff diffuse diffmerge ecmerge p4merge araxis bc codecompare smerge emerge vimdiff
Merging:
.gitignore

Normal merge conflict for '.gitignore':
  {local}: created file
  {remote}: created file
Hit return to start merge resolution tool (vimdiff):
3 files to edit

After Exiting the vi editor type this, 
$ git status
On branch master
Untracked files:
  (use "git add <file>..." to include in what will be committed)
        .gitignore.orig

nothing added to commit but untracked files present (use "git add" to track)

Then this,
$ git add .

And then this, 
$ git commit -m"Merging two local to one remote"
[master f95a9b4] Merging two local to one remote
 1 file changed, 5 insertions(+)
 create mode 100644 .gitignore.orig

And it's done !!! 
Now you can push with the folloing command, 

$ git push --set-upstream scm master
Enumerating objects: 36, done.
Counting objects: 100% (36/36), done.
Delta compression using up to 8 threads
Compressing objects: 100% (33/33), done.
Writing objects: 100% (34/34), 3.78 KiB | 297.00 KiB/s, done.
Total 34 (delta 18), reused 0 (delta 0)
remote: Resolving deltas: 100% (18/18), completed with 1 local object.
To https://github.com/AryanMukerji/Source-Code-Management-.git
   2f4f727..f95a9b4  master -> master
Branch 'master' set up to track remote branch 'master' from 'scm'.

}

{

Learned a few more git commands :-

$ git fetch origin
# Fetches updates made to an online repository
$ git merge origin YOUR_BRANCH_NAME
# Merges updates made online with your local work

$ git pull origin YOUR_BRANCH_NAME
# Grabs online updates and merges them with your local work

git pull origin master --allow-unrelated-histories

$ git push --set-upstream <remote> <branch>

}
